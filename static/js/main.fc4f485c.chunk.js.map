{"version":3,"sources":["Components/Button.js","Components/Input.js","Components/ClearButton.js","App.js","reportWebVitals.js","index.js"],"names":["Button","isOperator","val","isNaN","className","this","props","children","onClick","handleClick","Component","Input","ClearButton","handleClear","App","addToInput","userInput","setState","input","state","addDecimal","indexOf","addZeroToInput","clearInput","add","previousNumber","operator","subtract","multiply","divide","evaluate","currentNumber","parseInt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc4f485c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Button.css\";\n\nclass Button extends Component {\n  isOperator = (val) => {\n    return !isNaN(val) || val === \".\" || val === \"=\";\n  };\n\n  render() {\n    return (\n      <div\n        className={`button ${\n          this.isOperator(this.props.children) ? \"\" : \"operator\"\n        }`}\n        onClick={() => this.props.handleClick(this.props.children)}\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nexport default Button;\n","import React, { Component } from \"react\";\n\nclass Input extends Component {\n  render() {\n    return <div className=\"input\">{this.props.children}</div>;\n  }\n}\n\nexport default Input;\n","import React, { Component } from \"react\";\n\nclass ClearButton extends Component {\n  render() {\n    return (\n      <div className=\"clear-btn\" onClick={() => this.props.handleClear()}>\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nexport default ClearButton;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Button from \"./Components/Button\";\nimport Input from \"./Components/Input\";\nimport ClearButton from \"./Components/ClearButton\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      input: \"\",\n      previousNumber: \"\",\n      currentNumber: \"\",\n      operator: \"\",\n    };\n  }\n\n  addToInput = (userInput) => {\n    this.setState({ input: this.state.input + userInput });\n  };\n\n  addDecimal = (userInput) => {\n    // only add decimal if there is no current decimal point present in the input area\n    if (this.state.input.indexOf(\".\") === -1) {\n      this.setState({ input: this.state.input + userInput });\n    }\n  };\n\n  addZeroToInput = (userInput) => {\n    // if this.state.input is not empty then add zero\n    if (this.state.input !== \"\") {\n      this.setState({ input: this.state.input + userInput });\n    }\n  };\n\n  clearInput = () => {\n    this.setState({ input: \"\" });\n  };\n\n  add = () => {\n    this.state.previousNumber = this.state.input;\n    this.setState({ input: \"\" });\n    this.state.operator = \"plus\";\n  };\n\n  subtract = () => {\n    this.state.previousNumber = this.state.input;\n    this.setState({ input: \"\" });\n    this.state.operator = \"subtract\";\n  };\n\n  multiply = () => {\n    this.state.previousNumber = this.state.input;\n    this.setState({ input: \"\" });\n    this.state.operator = \"multiply\";\n  };\n\n  divide = () => {\n    this.state.previousNumber = this.state.input;\n    this.setState({ input: \"\" });\n    this.state.operator = \"divide\";\n  };\n\n  evaluate = () => {\n    this.state.currentNumber = this.state.input;\n\n    if (this.state.operator == \"plus\") {\n      this.setState({\n        input:\n          parseInt(this.state.previousNumber) +\n          parseInt(this.state.currentNumber),\n      });\n    } else if (this.state.operator == \"subtract\") {\n      this.setState({\n        input:\n          parseInt(this.state.previousNumber) -\n          parseInt(this.state.currentNumber),\n      });\n    } else if (this.state.operator == \"multiply\") {\n      this.setState({\n        input:\n          parseInt(this.state.previousNumber) *\n          parseInt(this.state.currentNumber),\n      });\n    } else if (this.state.operator == \"divide\") {\n      this.setState({\n        input:\n          parseInt(this.state.previousNumber) /\n          parseInt(this.state.currentNumber),\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"calc-wrapper\">\n          <div className=\"row\">\n            <Input>{this.state.input}</Input>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>7</Button>\n            <Button handleClick={this.addToInput}>8</Button>\n            <Button handleClick={this.addToInput}>9</Button>\n            <Button handleClick={this.divide}>/</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>4</Button>\n            <Button handleClick={this.addToInput}>5</Button>\n            <Button handleClick={this.addToInput}>6</Button>\n            <Button handleClick={this.multiply}>*</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>1</Button>\n            <Button handleClick={this.addToInput}>2</Button>\n            <Button handleClick={this.addToInput}>3</Button>\n            <Button handleClick={this.add}>+</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addDecimal}>.</Button>\n            <Button handleClick={this.addZeroToInput}>0</Button>\n            <Button handleClick={this.evaluate}>=</Button>\n            <Button handleClick={this.subtract}>-</Button>\n          </div>\n          <div className=\"row\">\n            <ClearButton handleClear={this.clearInput}>Clear</ClearButton>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}